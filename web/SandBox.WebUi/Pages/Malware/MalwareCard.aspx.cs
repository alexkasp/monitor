using System;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using DevExpress.Web.ASPxEditors;
using SandBox.Connection;
using SandBox.Db;
using SandBox.Log;
using SandBox.WebUi.Base;
using System.Web.UI;
using DevExpress.Web.ASPxGridView;
using System.Collections.Generic;
using SandBox.WebUi;
using System.Collections;
using System.Net;

namespace SandBox.WebUi.Pages.Malware
{
    public partial class MalwareCard  : BaseMainPage
    {
        private string navUrl = "";
        private Int32 mlwrID;
        bool blase = false;
        protected void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);
            //int rsch = Convert.ToInt32(Request.QueryString["mlwrIDh"]);
            //var research = ResearchManager.GetResearch(rsch);
            mlwrID = Convert.ToInt32(Request.QueryString["mlwrID"]);
            if (mlwrID == 0)
            {
                try
                {
                    mlwrID = (int)Session["mlwrID"];
                }
                catch
                {
                }
            }
            Session["mlwrID"] = mlwrID;
            Db.Mlwr mlwr = MlwrManager.GetMlwr(mlwrID);
            if (mlwr == null)
            {
                Response.Redirect("~/Error");
            }

//            GVRschs.DataSource = MlwrManager.GetResearchesByMlwr(mlwrID);
            var netReport = MlwrManager.GetNetReport(mlwrID);
           
            if (netReport == null)
            {
                ASPxButton2.Visible = true;
                HyperLink1.Visible = false;
            }
            else
            {
                ASPxButton2.Visible = false;
                HyperLink1.Visible = true;
                if (!IsPostBack)
                {
                    HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
                }
            }
            //int mlwrID = Convert.ToInt32(Session["mlwrID"]);
            //if (Session["mlwrID"] != null)
            //{
 
                LMlwrRsch.Text = "Карточка ВПО: "+ MlwrManager.GetMlwr(mlwrID).Name;
            //}
            
//            GVRschs.DataSource = MlwrManager.GetResearchesByMlwr(mlwrID);
            //GVRschs.DataBind();
            GVTargeting.DataSource = MlwrManager.GetTargetingOfMlwr(mlwrID);
            GVTargeting.DataBind();
            GVComments.DataSource = MlwrManager.GetCommentsById(mlwrID);
            GVComments.DataBind();

            if (!IsPostBack)
            {
                gridViewResearches.KeyFieldName = "Id";


                HLClassification.NavigateUrl += "?mlwrID=" + mlwrID;
            }

            UpdateTableView();
            if (!User.IsInRole("Administrator"))
            {
                if (!User.IsInRole("FileManager"))
                {
                    Response.Redirect("~/Account/Login.aspx");
                }
            }
            if (Master != null) ((MainMaster)Master).SetMenuFile("~/App_Data/SideMenu/Malware/MalwareMenu.xml");
            //string uri = String.Empty;
            //bool netAnalReady = this.CheckIfFtpFileExists(mlwrID,out uri);
            //if (netAnalReady)
            //{
            //    ASPxButton3.Enabled = false;
            //}
            //HyperLink2.NavigateUrl = uri;
            //ASPxLabel2.Text = uri;


        }

        private void UpdateTableView()
        {
            IQueryable rs = IsUserInRole("Administrator") ? ResearchManager.GetResearchesVPOView((Int32)Session["mlwrID"]) : ResearchManager.GetResearchesVPOView((Int32)Session["mlwrID"],UserId);

                gridViewResearches.DataSource = rs;
                gridViewResearches.DataBind();

                gridViewResearchesPager.Visible = gridViewResearches.Visible;
                if (gridViewResearches.VisibleRowCount > 0) { gridViewResearchesPager.ItemCount = gridViewResearches.VisibleRowCount; }
                else { gridViewResearchesPager.ItemCount = gridViewResearches.SettingsPager.PageSize; }
                gridViewResearchesPager.ItemsPerPage = gridViewResearches.SettingsPager.PageSize;
                if (gridViewResearches.PageIndex > 0) { gridViewResearchesPager.PageIndex = gridViewResearches.PageIndex; }
                else gridViewResearchesPager.PageIndex = 0;

        }

        protected void gridViewResearchesPager_PageIndexChanged(object sender, EventArgs e)
        {
            gridViewResearches.PageIndex = gridViewResearchesPager.PageIndex;
            gridViewResearches.DataBind();
        }

        protected void gridViewResearchesPager_PageSizeChanged(object sender, EventArgs e)
        {
            gridViewResearches.SettingsPager.PageSize = gridViewResearchesPager.ItemsPerPage;
            gridViewResearches.DataBind();
        }


        protected void GridViewResearchesHtmlRowPrepared(object sender, DevExpress.Web.ASPxGridView.ASPxGridViewTableRowEventArgs e)
        {
            if (e.RowType != DevExpress.Web.ASPxGridView.GridViewRowType.Data) return;

            ASPxHyperLink link = gridViewResearches.FindRowCellTemplateControl(e.VisibleIndex, null, "linkA") as ASPxHyperLink;
            if (link == null) return;
            Int32 researchId = (Int32)e.KeyValue;
            Db.Research research = ResearchManager.GetResearch(researchId);
            ASPxHyperLink currentReportLink = gridViewResearches.FindRowCellTemplateControl(e.VisibleIndex, null, "HLCurrentReport") as ASPxHyperLink;
            if (currentReportLink != null)
            {
                switch (research.State)
                {
                    case (Int32)ResearchState.COMPLETED:
                        {
                            currentReportLink.Visible = false;
                            break;
                        }
                    case (Int32)ResearchState.EXECUTING:
                        {
                            currentReportLink.Visible = true;
                            currentReportLink.NavigateUrl = String.Format("{0}/ReportList.aspx?research={1}", RootPath, e.KeyValue);
                            break;
                        }
                    default:
                        {
                            currentReportLink.Visible = false;
                            break;
                        }
                }
            }

            if (research.State == (Int32)ResearchState.COMPLETED)
            {
                var valid = ResearchManager.GetResearch((int)e.KeyValue);
                if (valid == null && ResearchManager.GetResearch((int)e.KeyValue - 1) != null) ;
                //link.NavigateUrl = RootPath + "/ReportList.aspx?research=" + ((int)e.KeyValue-1);
                var test = e.Row.Cells.Count;
                foreach (System.Web.UI.WebControls.TableCell cell in e.Row.Cells)
                {
                    var test1 = cell.Text;
                }
                link.NavigateUrl = "/Pages/Research/ReportList.aspx?research=" + e.KeyValue;
                //                e.Row.BackColor = Color.FromArgb(0xDB, 0xFA, 0xA5);
            }
            else
            {
                link.Visible = false;
            }

            if (research.State == (Int32)ResearchState.EXECUTING)
            {
                e.Row.BackColor = Color.FromArgb(0xDB, 0xFA, 0xA5);
                //                e.Row.BackColor = Color.Teal;
            }
        }

        protected void gridViewResearches_DataSelect(object sender, EventArgs e)
        {
            Int32 count = IsUserInRole("Administrator") ? ResearchManager.GetResearches().Count() : ResearchManager.GetResearches(UserId).Count();
            IQueryable rs = IsUserInRole("Administrator") ? ResearchManager.GetResearchesTableView() : ResearchManager.GetResearchesTableView(UserId);

            //gridViewResearchesPager.Visible = gridViewResearches.Visible;
            //if (gridViewResearches.VisibleRowCount > 0) { gridViewResearchesPager.ItemCount = gridViewResearches.VisibleRowCount; }
            //else { gridViewResearchesPager.ItemCount = gridViewResearches.SettingsPager.PageSize; }
            //gridViewResearchesPager.ItemsPerPage = gridViewResearches.SettingsPager.PageSize;
            //if (gridViewResearches.PageIndex > 0) { gridViewResearchesPager.PageIndex = gridViewResearches.PageIndex; }
            //else gridViewResearchesPager.PageIndex = 0;

        }


        protected void Detail_DataSelect(object sender, EventArgs e)
        {
            try
            {
                int rschIdx = 0;
                int[] FileEvs = new int[2];
                int[] RegistryEvs = new int[2];
                int[] NetEvs = new int[2];
                int[] ProcessEvs = new int[2];
                ASPxGridView grid = (ASPxGridView)sender;
                rschIdx = (int)grid.GetMasterRowKeyValue();
                grid.DataSource = TaskManager.GetTasksViewForRsch(rschIdx);//dataX;

                var db = new SandBoxDataContext();
                var rdof = from d in db.EventsChartCounts
                           where d.Id == rschIdx
                           select d;
                foreach (var rr in rdof)
                {
                    switch (rr.Module)
                    {
                        case "Файловая система":
                            switch (rr.Sign)
                            {
                                case 1: FileEvs[0] += (int)rr.Count; break;
                                default: FileEvs[1] += (int)rr.Count; break;
                            } break;
                        case "Реестр":
                            switch (rr.Sign)
                            {
                                case 1: RegistryEvs[0] += (int)rr.Count; break;
                                default: RegistryEvs[1] += (int)rr.Count; break;
                            } break;
                        case "Процессы":
                            switch (rr.Sign)
                            {
                                case 1: ProcessEvs[0] += (int)rr.Count; break;
                                default: ProcessEvs[1] += (int)rr.Count; break;
                            } break;
                        case "TDIMON":
                        case "NDISMON":
                            switch (rr.Sign)
                            {
                                case 1: NetEvs[0] += (int)rr.Count; break;
                                default: NetEvs[1] += (int)rr.Count; break;
                            } break;
                    }
                }

                grid.ClientSideEvents.Init = "function(s, e) { drawHalfPie('chartHolder1',Array(" + FileEvs[1].ToString() + ","
                     + FileEvs[0].ToString() + ")); drawHalfPie('chartHolder2',Array(" + RegistryEvs[1].ToString() + ","
                     + RegistryEvs[0].ToString() + ")); drawHalfPie('chartHolder3',Array(" + ProcessEvs[1].ToString() + ","
                     + ProcessEvs[0].ToString() + ")); drawHalfPie('chartHolder4',Array(" + NetEvs[1].ToString() + ","
                     + NetEvs[0].ToString() + "));"
                     + "$('.detailrowreport > a').attr('href', '/Pages/Research/ReportList.aspx?researchId=" + rschIdx + "')}";
            }
            catch (Exception)
            {

                throw;
            }
        }

        protected void ImageButton1_Click(object sender, ImageClickEventArgs e)
        {
            Response.Redirect("~/Pages/Research/ReportList.aspx");
        }

        protected void gridViewResearches_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            if (e.Parameters == "DeleteSelected")
            {
                List<object> keyValues = gridViewResearches.GetSelectedFieldValues("Id");
                foreach (object key in keyValues)
                {
                    int testkey = (int)key;
                    ResearchManager.DeleteResearch(testkey);
                }
                UpdateTableView();
                gridViewResearches.Selection.UnselectAll();
            }
        }

        protected void gridViewResearches_CustomJSProperties(object sender, ASPxGridViewClientJSPropertiesEventArgs e)
        {
            Hashtable table = new Hashtable(gridViewResearches.DetailRows.VisibleCount);
            for (int i = 0; i < gridViewResearches.VisibleRowCount; i++)
            {
                if (gridViewResearches.DetailRows.IsVisible(i))
                    table[i] = true;
            }
            e.Properties["cpVisibleDetails"] = table;
        }

        protected void BManualClassification_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/Pages/Malware/Classification.aspx" + "?mlwrID=" + mlwrID);
        }

        protected void ASPxButton2_Click(object sender, EventArgs e)
        {
            var mlwr = MlwrManager.GetMlwr(mlwrID);
            string outFileName = String.Format("{0}_inetCheck.report", mlwrID);
            Packet packet = new Packet { Type = PacketType.CDM_MLWR_NETCHECK, Direction = PacketDirection.REQUEST };//CDM_MLWR_NETCHECK   = 0xD8 Отправить впо на проверку в инет
            packet.AddParameter(Encoding.UTF8.GetBytes(String.Format("{0}",mlwrID)));          
            packet.AddParameter(Encoding.UTF8.GetBytes(outFileName));
            packet.AddParameter(Encoding.UTF8.GetBytes(mlwr.Name));
            SendPacket(packet.ToByteArray());
            Timer1.Enabled = true;
            ASPxButton2.Enabled = false;
        }

        protected void ASPxButton1_Click(object sender, EventArgs e)
        {

        }

        public bool CheckIfFtpFileExists(int mlwrId, out string uri)
        {
          
                var settings = ConnectionManager.LoadSettings();
                string remoteHost = settings.RemoteHost;
                string fileName = String.Format("{0}_inetCheck.report", mlwrID);

                string ur = "ftp://" + remoteHost + "/" + fileName;
                uri = ur;
                Uri ourUri = new Uri(String.Format(ur));
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ourUri);
                request.Credentials = new NetworkCredential();
                request.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    //файл существует
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (FtpStatusCode.ActionNotTakenFileUnavailable == response.StatusCode)
                    {
                        // файл не существует 
                        return false;
                    }
                    uri += " (" + ex.Message + ")";
                    return false;
                }
                return true;
           
        }

        protected void ASPxButton3_Click(object sender, EventArgs e)
        {

        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            var netReport = MlwrManager.GetNetReport(mlwrID);
            if (netReport == null)
            {
                ASPxButton2.Visible = true;
                HyperLink1.Visible = false;
            }
            else
            {
                ASPxButton2.Visible = false;
                HyperLink1.Visible = true;
                if (!IsPostBack)
                {
                    HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
                }
                HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
            }

        }
    }
}
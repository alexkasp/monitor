using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxUploadControl;
using SandBox.Db;
using SandBox.Connection;
using System.Text;
using SandBox.WebUi.Base;
using System.Net;

namespace SandBox.WebUi.Pages.Malware
{
    public partial class MalwareCard  : BaseMainPage
    {
        private string navUrl = "";
        private Int32 mlwrID = -1;
        bool blase = false;
        protected void Page_Load(object sender, EventArgs e)
        {
            base.Page_Load(sender, e);
            //int rsch = Convert.ToInt32(Request.QueryString["mlwrIDh"]);
            //var research = ResearchManager.GetResearch(rsch);
            mlwrID = Convert.ToInt32(Request.QueryString["mlwrID"]);
            GVRschs.DataSource = MlwrManager.GetResearchesByMlwr(mlwrID);
            var netReport = MlwrManager.GetNetReport(mlwrID);
           
            if (netReport == null)
            {
                ASPxButton2.Visible = true;
                HyperLink1.Visible = false;
            }
            else
            {
                ASPxButton2.Visible = false;
                HyperLink1.Visible = true;
                if (!IsPostBack)
                {
                    HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
                }
            }
            //int mlwrID = Convert.ToInt32(Session["mlwrID"]);
            //if (Session["mlwrID"] != null)
            //{
 
                LMlwrRsch.Text = "Карточка ВПО: "+ MlwrManager.GetMlwr(mlwrID).Name;
            //}
            
            GVRschs.DataSource = MlwrManager.GetResearchesByMlwr(mlwrID);
            GVRschs.DataBind();
            GVTargeting.DataSource = MlwrManager.GetTargetingOfMlwr(mlwrID);
            GVTargeting.DataBind();
            GVComments.DataSource = MlwrManager.GetCommentsById(mlwrID);
            GVComments.DataBind();

            if (!IsPostBack)
            {
                
                HLClassification.NavigateUrl += "?mlwrID=" + mlwrID;
            }

            if (!User.IsInRole("Administrator"))
            {
                if (!User.IsInRole("FileManager"))
                {
                    Response.Redirect("~/Account/Login.aspx");
                }
            }
            if (Master != null) ((MainMaster)Master).SetMenuFile("~/App_Data/SideMenu/Malware/MalwareMenu.xml");
            //string uri = String.Empty;
            //bool netAnalReady = this.CheckIfFtpFileExists(mlwrID,out uri);
            //if (netAnalReady)
            //{
            //    ASPxButton3.Enabled = false;
            //}
            //HyperLink2.NavigateUrl = uri;
            //ASPxLabel2.Text = uri;


        }

        protected void BManualClassification_Click(object sender, EventArgs e)
        {
            Response.Redirect("~/Pages/Malware/Classification.aspx" + "?mlwrID=" + mlwrID);
        }

        protected void ASPxButton2_Click(object sender, EventArgs e)
        {
            var mlwr = MlwrManager.GetMlwr(mlwrID);
            string outFileName = String.Format("{0}_inetCheck.report", mlwrID);
            Packet packet = new Packet { Type = PacketType.CDM_MLWR_NETCHECK, Direction = PacketDirection.REQUEST };//CDM_MLWR_NETCHECK   = 0xD8 Отправить впо на проверку в инет
            packet.AddParameter(Encoding.UTF8.GetBytes(String.Format("{0}",mlwrID)));          
            packet.AddParameter(Encoding.UTF8.GetBytes(outFileName));
            packet.AddParameter(Encoding.UTF8.GetBytes(mlwr.Name));
            SendPacket(packet.ToByteArray());
            Timer1.Enabled = true;
            ASPxButton2.Enabled = false;
        }

        protected void ASPxButton1_Click(object sender, EventArgs e)
        {

        }

        public bool CheckIfFtpFileExists(int mlwrId, out string uri)
        {
          
                var settings = ConnectionManager.LoadSettings();
                string remoteHost = settings.RemoteHost;
                string fileName = String.Format("{0}_inetCheck.report", mlwrID);

                string ur = "ftp://" + remoteHost + "/" + fileName;
                uri = ur;
                Uri ourUri = new Uri(String.Format(ur));
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ourUri);
                request.Credentials = new NetworkCredential();
                request.Method = WebRequestMethods.Ftp.GetFileSize;

                try
                {
                    FtpWebResponse response = (FtpWebResponse)request.GetResponse();
                    //файл существует
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (FtpStatusCode.ActionNotTakenFileUnavailable == response.StatusCode)
                    {
                        // файл не существует 
                        return false;
                    }
                    uri += " (" + ex.Message + ")";
                    return false;
                }
                return true;
           
        }

        protected void ASPxButton3_Click(object sender, EventArgs e)
        {

        }

        protected void Timer1_Tick(object sender, EventArgs e)
        {
            var netReport = MlwrManager.GetNetReport(mlwrID);
            if (netReport == null)
            {
                ASPxButton2.Visible = true;
                HyperLink1.Visible = false;
            }
            else
            {
                ASPxButton2.Visible = false;
                HyperLink1.Visible = true;
                if (!IsPostBack)
                {
                    HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
                }
                HyperLink1.NavigateUrl = "~/Pages/Malware/MlwrNetReport.aspx" + "?reportID=" + netReport.Id;
            }

        }
    }
}
using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using DevExpress.Web.ASPxGridView;
using DevExpress.Web.ASPxUploadControl;
using SandBox.Connection;
using SandBox.Db;
using SandBox.Log;
using DevExpress.Web.ASPxEditors;
using System.Security.Cryptography;
using System.Text;
using System.Globalization;
using System.IO;
using System.Web.UI;

namespace SandBox.WebUi.Pages.Malware
{
    public partial class Malwares : System.Web.UI.Page
    {
        private static ConnectionClientEx _client;
        private static ConnectionSetting _settings;
        private static Int32 _userId;

        protected void Page_Load(object sender, EventArgs e)
        {
            Title = "ВПО";
            _client = ConnectionClientEx.Instance;
            _settings = ConnectionManager.LoadSettings();

            if (!User.IsInRole("Administrator"))
            {
                if (!User.IsInRole("FileManager"))
                {
                    btnDownload.ClientVisible = false;
                }
            }
            if (Master != null) ((MainMaster)Master).SetMenuFile("~/App_Data/SideMenu/Malware/MalwareMenu.xml");

            _userId = (Int32)UserManager.GetUser(User.Identity.Name).ProviderUserKey;

            //gridViewMalware.Settings.ShowHeaderFilterButton = true;
            //gridViewMalware.KeyFieldName = "Id";

            //foreach (var column in
            //    gridViewMalware.Columns.Cast<object>().Where(column => column.GetType() == typeof(GridViewDataColumn)))
            //{
            //    ((GridViewDataColumn)column).Settings.HeaderFilterMode = HeaderFilterMode.List;
            //}

            //if (!IsPostBack)
            //{
            //    UpdateTableView();
            //    DbManager.OnTableUpdated += OnTableUpdated;
            //}
            UpdateTableView();
        }

        private void OnTableUpdated(Table table)
        {
            if (table == Table.MLWRS)
            {
                UpdateTableView();
            }
        }

        private void UpdateTableView()
        {
            gridViewMalware.DataSource = MlwrManager.GetMlwrsTableView();
            gridViewMalware.DataBind();
            gridMalwareViewPager.Visible = gridViewMalware.Visible;
            if (gridViewMalware.VisibleRowCount > 0) { gridMalwareViewPager.ItemCount = gridViewMalware.VisibleRowCount; }
            else { gridMalwareViewPager.ItemCount = gridViewMalware.SettingsPager.PageSize; }
            gridMalwareViewPager.ItemsPerPage = gridViewMalware.SettingsPager.PageSize;
            if (gridViewMalware.PageIndex > 0) { gridMalwareViewPager.PageIndex = gridViewMalware.PageIndex; }
            else gridMalwareViewPager.PageIndex = 0;
        }

        protected void UpdateTimerTick(object sender, EventArgs e)
        {
            UpdateTableView();
        }

        protected void GridViewMalwareHeaderFilterFillItems(object sender, ASPxGridViewHeaderFilterEventArgs e)
        {
            e.Values.Clear();

            if (e.Column.FieldName == "Class")
            {
                foreach (var cls in MlwrManager.GetMlwrClassList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Name")
            {
                foreach (var cls in MlwrManager.GetMlwrNameList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Path")
            {
                foreach (var cls in MlwrManager.GetMlwrPathList())
                {
                    e.AddValue(cls, cls);
                }
            }

            if (e.Column.FieldName == "Loaded")
            {
                foreach (var cls in MlwrManager.GetMlwrLoadedList())
                {
                    e.AddValue(cls, cls);
                }
            }
        }

        protected void CallbackPanelDeleteCallback(object source, DevExpress.Web.ASPxClasses.CallbackEventArgsBase e)
        {
            Int32 mlwrId = Convert.ToInt32(e.Parameter);
            Session["mlwrId"] = mlwrId;
            if (mlwrId == 0) return;
            deleteText.Text = "Вы точно хотите удалить ВПО " + MlwrManager.GetMlwr(mlwrId).Path + "?";
        }
      
        protected void FileUploadComplete(object sender, FileUploadCompleteEventArgs e)
        {
            if (e.UploadedFile.FileName != String.Empty)
            {
                e.CallbackData = e.UploadedFile.FileName;
                string md5 = BitConverter.ToString(MD5.Create().ComputeHash(e.UploadedFile.FileContent)).Replace("-", string.Empty);
                string sha1 = BitConverter.ToString(new System.Security.Cryptography.SHA1Managed().ComputeHash(e.UploadedFile.FileContent)).Replace("-", string.Empty);
                string sha256 = BitConverter.ToString(new System.Security.Cryptography.SHA256Managed().ComputeHash(e.UploadedFile.FileContent)).Replace("-", string.Empty);
                Db.Mlwr mlwr = MlwrManager.GetMlwr(md5,sha1,sha256);
                if (mlwr != null)
                {
                    //string alertstr = "ВПО '" + e.UploadedFile.FileName + "' было загружено в систему ранее по именем '" + mlwr.Name + "'(" + mlwr.Path + ")\\nпользователем " +
                    //    UserManager.GetUser(mlwr.LoadedBy).UserName + " " + mlwr.LoadedDate + ".";
                    //hfalert["alertstr"] = alertstr;
                    e.CallbackData = "ВПО '" + e.UploadedFile.FileName + "' было загружено в систему ранее по именем '" + mlwr.Name + "' (" + mlwr.Path + ")\nпользователем " +
                        UserManager.GetUser(mlwr.LoadedBy).UserName + " " + mlwr.LoadedDate + ".";
                    //string scriptstring = "alert(\"ВПО '" + e.UploadedFile.FileName + "' было загружено в систему ранее по именем '" + mlwr.Name + "'(" + mlwr.Path + ")\\пользователем "+
                    //    UserManager.GetUser(mlwr.LoadedBy).UserName + " " + mlwr.LoadedDate + ".\");";
                    //ScriptManager.RegisterStartupScript(Page, Page.GetType(), "alert", scriptstring, true);
                    e.IsValid = false;
                    return;
                }
                string filename = Path.GetFileNameWithoutExtension(e.UploadedFile.FileName);
                string fileext = Path.GetExtension(e.UploadedFile.FileName);
                if (MlwrManager.IsVPOFileExist(e.UploadedFile.FileName))
                {
                    int i = 1;
                    string filename2 = filename + i.ToString();
                    while (MlwrManager.IsVPOFileExist(filename2 + fileext))
                    {
                        i++;
                        filename2 = filename + i.ToString();
                    }
                    filename = filename2;
                }
                filename = filename + fileext;
                try
                {
                    String ftpAddres = "ftp://" + _settings.RemoteHost + "/" + filename;

                    MLogger.LogTo(Level.TRACE, false, "Loading file " + filename + " to " + ftpAddres);

                    using (var webClient = new WebClient())
                    {
                        webClient.UploadData(new Uri(ftpAddres), e.UploadedFile.FileBytes);
                    }

                    MlwrManager.AddMlwr(filename, filename, _userId, md5, sha1, sha256);
                    e.CallbackData = "ВПО '" + e.UploadedFile.FileName + "' успешно загружено под именем '" + filename + "'";
                    UpdateTableView();
                }
                catch (Exception ex)
                {
                    MLogger.LogTo(Level.ERROR, false, "Exception during loading: " + ex.Message);
                    e.CallbackData = "Ошибка: " + ex.Message;
                    //test!!!
                    //MlwrManager.AddMlwr("default", e.UploadedFile.FileName, _userId);
                    //UpdateTableView();
                }
            }
        }

        protected void BtnUploadClick(object sender, EventArgs e)
        {
            Debug.Print("Upl");
        }

        protected void BtnDeleteClick(object sender, EventArgs e)
        {
            deleteText.Text = String.Empty;
            Int32 mlwrId = Convert.ToInt32(Session["mlwrId"]);
            if (mlwrId == 0) return;
            MlwrManager.DeleteMlwr(mlwrId);
        }

        protected void gridViewMalware_HtmlRowPrepared(object sender, ASPxGridViewTableRowEventArgs e)
        {
            if (e.RowType != DevExpress.Web.ASPxGridView.GridViewRowType.Data) return;
            ASPxHyperLink linkMlwr = gridViewMalware.FindRowCellTemplateControl(e.VisibleIndex, null, "HLMlwrCard") as ASPxHyperLink;
            if (linkMlwr == null) return;
            linkMlwr.NavigateUrl += "?mlwrID=" + Convert.ToInt32(e.KeyValue);

        }

        protected void gridViewMalware_CustomCallback(object sender, ASPxGridViewCustomCallbackEventArgs e)
        {
            string[] Params = e.Parameters.Split(',');
            Int32 id = Convert.ToInt32(Params[1]);
            switch (Params[0])
            {
                case "cbDelete":
                    MlwrManager.DeleteMlwr(id);
                    UpdateTableView();
                    break;
            }
        }

        protected void gridMalwareViewPager_PageIndexChanged(object sender, EventArgs e)
        {
            gridViewMalware.PageIndex = gridMalwareViewPager.PageIndex;
            UpdateTableView();
        }

        protected void gridMalwareViewPager_PageSizeChanged(object sender, EventArgs e)
        {
            gridViewMalware.SettingsPager.PageSize = gridMalwareViewPager.ItemsPerPage;
            UpdateTableView();
        }

    }//end class
}//end namespace